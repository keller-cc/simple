<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
    <!-- 定义结果映射 -->
    <resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id" />
        <result property="userName" column="user_name" />
        <result property="userPassword" column="user_password" />
        <result property="userEmail" column="user_email" />
        <result property="userInfo" column="user_info" />
        <result property="headImg" column="head_img" jdbcType="BLOB" />
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP" />
    </resultMap>

    <resultMap id="userRoleMap" extends="userMap" type = "tk.mybatis.simple.model.SysUser">
        <association property="role" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
    </resultMap>

    <resultMap id="userRoleMapSelect" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <association property="role" fetchType="lazy" column="{id=role_id}" select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById"/>
    </resultMap>

    <resultMap id="userRoleListMap"  extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <collection property="roleList" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>

    <resultMap id="userRoleListMapSelect" extends="userMap"
               type="tk.mybatis.simple.model.SysUser">
        <collection property="roleList"
                    fetchType="lazy"
                    select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"
                    column="{userId=id}"/>
    </resultMap>

    <!-- 根据ID查询用户 -->
    <select id="selectById" resultMap="userMap">
        SELECT * FROM sys_user WHERE id = #{id}
    </select>

    <!-- 查询全部用户 -->
    <select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
        SELECT
            id,
            user_name AS userName,
            user_password AS userPassword,
            user_email AS userEmail,
            user_info AS userInfo,
            head_img AS headImg,
            create_time AS createTime
        FROM
            sys_user
    </select>

    <!-- 根据用户ID查询角色列表 -->
    <select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
        SELECT
            r.id,
            r.role_name AS roleName,
            r.enabled,
            r.create_by AS createBy,
            r.create_time AS createTime
        FROM
            sys_user u
        INNER JOIN
            sys_user_role ur ON u.id = ur.user_id
        INNER JOIN
            sys_role r ON ur.role_id = r.id
        WHERE
            u.id = #{userId}
    </select>

    <!-- 插入新用户 -->
    <insert id="insert">
        INSERT INTO sys_user(
            id,
            user_name,
            user_password,
            user_email,
            user_info,
            head_img,
            create_time
        ) VALUES (
            #{id},
            #{userName},
            #{userPassword},
            #{userEmail},
            #{userInfo},
            #{headImg, jdbcType=BLOB},
            #{createTime, jdbcType=TIMESTAMP}
        )
    </insert>

    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user(
            user_name,
            user_password,
            <if test="userEmail != null and userEmail != ''">
                user_email,
            </if>
            user_info,
            head_img,
            create_time
        )
        VALUES(
            #{userName},
            #{userPassword},
            <if test="userEmail != null and userEmail != ''">
                #{userEmail},
            </if>
            #{userInfo},
            #{headImg, jdbcType=BLOB},
            #{createTime, jdbcType=TIMESTAMP}
            )
    </insert>

    <insert id="insert3" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user(
            user_name,
            user_password,
            user_email,
            user_info,
            head_img,
            create_time
        ) VALUES (
            #{userName},
            #{userPassword},
            #{userEmail},
            #{userInfo},
            #{headImg, jdbcType=BLOB},
            #{createTime, jdbcType=TIMESTAMP}
        )
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- 更新用户 -->
    <update id="updateById">
        UPDATE sys_user
        SET
            user_name = #{userName},
            user_password = #{userPassword},
            user_email = #{userEmail},
            user_info = #{userInfo},
            head_img = #{headImg, jdbcType=BLOB},
            create_time = #{createTime, jdbcType=TIMESTAMP}
        WHERE
            id = #{id}
    </update>

    <!-- 删除用户 -->
    <delete id="deleteById">
        DELETE FROM sys_user
        WHERE id = #{id}
    </delete>

    <!-- 根据动态条件查询用户信息 -->
    <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
        select
        id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        <where>
            <if test="userName != null and userName != ''">
                <if test="_databaseId == 'mysql'">
                    and user_name like concat('%', #{userName}, '%')
                </if>
                <if test="_databaseId == 'oracle'">
                    and user_name like '%' || #{userName} || '%'
                </if>
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>
    
    <!-- 根据主键更新 -->
    <update id="updateByIdSelective">
        update sys_user
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null">
                head_img = #{headImg, jdbcType=BLOB},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            id = #{id},
        </set>
        where id = #{id}
    </update>
    
    <!-- 根据用户id或用户名查询 -->
    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
        select
            id,
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
        where 1 = 1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>

    <select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
        select
            id,
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from sys_user
        where id in
        <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select>

    <!-- 批量插入用户 -->
    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userName}, #{user.userPassword}, #{user.userEmail}, #{user.userInfo}, #{user.headImg, jdbcType=BLOB}, #{user.createTime, jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <!-- 通过Map更新列 -->
    <update id="updateByMap">
        update sys_user
        set
        <foreach collection="_parameter" item="val" index="key" separator=",">
                ${key}=#{val}
        </foreach>
        where id = #{id}
    </update>

    <select id="selectUserAndRoleById"
            resultType="tk.mybatis.simple.model.SysUser">
        SELECT
            u.id,
            u.user_name AS userName,
            u.user_password AS userPassword,
            u.user_email AS userEmail,
            u.user_info AS userInfo,
            u.head_img AS headImg,
            u.create_time AS createTime,
            r.id AS "role.id",
            r.role_name AS "role.roleName",
            r.enabled AS "role.enabled",
            r.create_by AS "role.createBy",
            r.create_time AS "role.createTime"
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        WHERE u.id = #{id}
    </select>

    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            r.id AS role_id,
            r.role_name AS role_role_name,
            r.enabled AS role_enabled,
            r.create_by AS role_create_by,
            r.create_time AS role_create_time
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        WHERE u.id = #{id}
    </select>

    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            ur.role_id
        FROM
            sys_user u
        INNER JOIN
            sys_user_role ur ON u.id = ur.user_id
        WHERE u.id = #{id}
    </select>

    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time,
            r.id AS role_id,
            r.role_name AS role_role_name,
            r.enabled AS role_enabled,
            r.create_by AS role_create_by,
            r.create_time AS role_create_time,
            p.privilege_name role_privilege_privilege_name,
            p.privilege_url role_privilege_privilege_url
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        INNER JOIN sys_role_privilege rp on rp.role_id = r.id
        INNER JOIN sys_privilege p on p.id = rp.privilege_id
    </select>

    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.user_info,
            u.head_img,
            u.create_time
        FROM sys_user u
        WHERE u.id = #{id}
    </select>

    <select id="selectUserById" statementType="CALLABLE" useCache="false">
        {call select_user_by_id(
        #{id, mode=IN},
        #{userName, mode=OUT, jdbcType=VARCHAR},
        #{userPassword, mode=OUT, jdbcType=VARCHAR},
        #{userEmail, mode=OUT, jdbcType=VARCHAR},
        #{userInfo, mode=OUT, jdbcType=VARCHAR},
        #{headImg, mode=OUT, jdbcType=BLOB, javaType=_byte[]},
        #{createTime, mode=OUT, jdbcType=TIMESTAMP}
        )}
    </select>

    <select id="selectUserPage" statementType="CALLABLE" useCache="false" resultMap="userMap">
        {call select_user_page(
        #{userName, mode=IN, jdbcType=VARCHAR},
        #{offset, mode=IN, jdbcType=BIGINT},
        #{limit, mode=IN, jdbcType=BIGINT},
        #{total, mode=OUT, jdbcType=BIGINT}
        )}
    </select>

    <!-- 插入用户及关联角色 -->
    <insert id="insertUserAndRoles" statementType="CALLABLE">
        {call insert_user_and_roles(
        #{user.id, mode=OUT, jdbcType=BIGINT},
        #{user.userName, mode=IN, jdbcType=VARCHAR},
        #{user.userPassword, mode=IN, jdbcType=VARCHAR},
        #{user.userEmail, mode=IN, jdbcType=VARCHAR},
        #{user.userInfo, mode=IN, jdbcType=VARCHAR},
        #{user.headImg, mode=IN, jdbcType=BLOB},
        #{user.createTime, mode=OUT, jdbcType=TIMESTAMP},
        #{roleIds, mode=IN, jdbcType=VARCHAR}
        )}
    </insert>

    <!-- 删除用户 -->
    <delete id="deleteUserById" statementType="CALLABLE">
        {call delete_user_by_id(#{id, mode=IN, jdbcType=BIGINT})}
    </delete>
</mapper>